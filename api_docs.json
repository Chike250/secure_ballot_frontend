{
  "openapi": "3.0.3",
  "info": {
    "title": "Nigeria E-Voting API",
    "description": "A secure API for the Nigerian hybrid encryption-based voting system with USSD integration",
    "version": "1.0.0",
    "contact": {
      "name": "Nigeria Electoral Commission",
      "url": "https://evoting.gov.ng",
      "email": "support@evoting.gov.ng"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://evoting.gov.ng/license"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Development Server"
    },
    {
      "url": "http://localhost:8080",
      "description": "Production Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      },
      "VoterLoginRequest": {
        "type": "object",
        "required": [
          "nin",
          "vin"
        ],
        "properties": {
          "nin": {
            "type": "string",
            "pattern": "^[0-9]{11}$",
            "description": "11-digit National Identification Number",
            "example": "12345678901"
          },
          "vin": {
            "type": "string",
            "pattern": "^[A-Z0-9]{19}$",
            "description": "19-character Voter Identification Number",
            "example": "ABC12345678901234567"
          }
        }
      },
      "OtpVerificationRequest": {
        "type": "object",
        "required": [
          "userId",
          "otpCode"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID from initial login request"
          },
          "otpCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "description": "6-digit OTP code",
            "example": "123456"
          }
        }
      },
      "AdminLoginRequest": {
        "type": "object",
        "required": [
          "nin",
          "password"
        ],
        "properties": {
          "nin": {
            "type": "string",
            "pattern": "^[0-9]{11}$",
            "description": "11-digit National Identification Number",
            "example": "12345678901"
          },
          "password": {
            "type": "string",
            "description": "Admin password",
            "example": "SecurePassword123!"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "JWT authentication token"
              },
              "user": {
                "type": "object",
                "description": "User information"
              }
            }
          }
        }
      },
      "OtpResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "format": "uuid"
              },
              "email": {
                "type": "string",
                "description": "Masked email address"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "API endpoints for user authentication"
    },
    {
      "name": "Voter Management",
      "description": "API endpoints for voter management"
    },
    {
      "name": "Elections",
      "description": "API endpoints for election management"
    },
    {
      "name": "Voting",
      "description": "API endpoints for casting votes"
    },
    {
      "name": "Results",
      "description": "API endpoints for election results"
    },
    {
      "name": "USSD",
      "description": "API endpoints for USSD integration"
    },
    {
      "name": "Mobile Integration",
      "description": "API endpoints for mobile application integration"
    },
    {
      "name": "System Administrator",
      "description": "API endpoints for system administration"
    },
    {
      "name": "Electoral Commissioner",
      "description": "API endpoints for electoral commissioners"
    },
    {
      "name": "Security",
      "description": "API endpoints for security monitoring"
    }
  ],
  "swaggerURL": "/api-docs.json",
  "paths": {
    "/api/v1/admin/users": {
      "get": {
        "summary": "Get all admin users (System Admin only)",
        "tags": [
          "Admin Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "all"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of admin users returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a System Admin"
          }
        }
      },
      "post": {
        "summary": "Create a new admin user (System Admin only)",
        "tags": [
          "Admin Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "fullName",
                  "phoneNumber",
                  "password",
                  "role"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "fullName": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "SystemAdministrator",
                      "ElectoralCommissioner",
                      "SecurityOfficer",
                      "SystemAuditor",
                      "RegionalElectoralOfficer",
                      "ElectionManager",
                      "ResultVerificationOfficer"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin user created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a System Admin"
          },
          "409": {
            "description": "User with this email already exists"
          }
        }
      }
    },
    "/api/v1/admin/audit-logs": {
      "get": {
        "summary": "Get audit logs with filtering and pagination",
        "tags": [
          "System Auditor"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actionType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/v1/admin/elections": {
      "post": {
        "summary": "Create a new election and generate encryption keys",
        "description": "Creates a new election and automatically generates encryption keys for secure voting. If key generation fails, the election is still created successfully.",
        "tags": [
          "Electoral Commissioner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "electionName",
                  "electionType",
                  "startDate",
                  "endDate"
                ],
                "properties": {
                  "electionName": {
                    "type": "string",
                    "description": "Name of the election",
                    "example": "2024 Presidential Election"
                  },
                  "electionType": {
                    "type": "string",
                    "enum": [
                      "Presidential",
                      "Gubernatorial",
                      "Senatorial",
                      "HouseOfReps",
                      "StateAssembly",
                      "LocalGovernment"
                    ],
                    "description": "Type of election",
                    "example": "Presidential"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Election start date and time",
                    "example": "2024-12-20T08:00:00.000Z"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Election end date and time",
                    "example": "2024-12-20T18:00:00.000Z"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional election description",
                    "example": "Presidential election for the year 2024"
                  },
                  "eligibilityRules": {
                    "type": "object",
                    "description": "Optional eligibility rules for voters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Election created successfully with encryption keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Election created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Election ID",
                          "example": "f0c6ff28-374b-4f2b-8756-55147cd9a60f"
                        },
                        "electionName": {
                          "type": "string",
                          "example": "2024 Presidential Election"
                        },
                        "electionType": {
                          "type": "string",
                          "example": "Presidential"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-12-20T08:00:00.000Z"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-12-20T18:00:00.000Z"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "example": "Presidential election for the year 2024"
                        },
                        "isActive": {
                          "type": "boolean",
                          "example": false
                        },
                        "status": {
                          "type": "string",
                          "example": "draft"
                        },
                        "keysGenerated": {
                          "type": "boolean",
                          "description": "Whether encryption keys were successfully generated",
                          "example": true
                        },
                        "publicKeyFingerprint": {
                          "type": "string",
                          "description": "Fingerprint of the generated public key (if keys were generated)",
                          "example": "abc123def456"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-12-19T15:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-12-19T15:30:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "409": {
            "description": "Election with overlapping dates already exists"
          }
        }
      }
    },
    "/api/v1/admin/elections/{electionId}/generate-keys": {
      "post": {
        "summary": "Generate encryption keys for an election",
        "description": "Generates encryption keys for an existing election that doesn't have keys yet. This is useful for elections created before automatic key generation was implemented.",
        "tags": [
          "Electoral Commissioner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "description": "The ID of the election to generate keys for",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "f0c6ff28-374b-4f2b-8756-55147cd9a60f"
          }
        ],
        "responses": {
          "201": {
            "description": "Election keys generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Election keys generated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "electionId": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Election ID",
                          "example": "f0c6ff28-374b-4f2b-8756-55147cd9a60f"
                        },
                        "publicKeyFingerprint": {
                          "type": "string",
                          "description": "Fingerprint of the generated public key",
                          "example": "abc123def456"
                        },
                        "keyGeneratedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the keys were generated",
                          "example": "2024-12-19T15:30:00.000Z"
                        },
                        "isActive": {
                          "type": "boolean",
                          "description": "Whether the keys are active",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid election ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Election not found"
          },
          "409": {
            "description": "Keys already exist for this election"
          }
        }
      }
    },
    "/api/v1/admin/security-logs": {
      "get": {
        "summary": "Get security logs with filtering and pagination",
        "tags": [
          "Security Officer"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "critical"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security logs returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/v1/admin/results/publish": {
      "post": {
        "summary": "Publish election results",
        "tags": [
          "Electoral Commissioner",
          "Result Verification Officer"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "electionId"
                ],
                "properties": {
                  "electionId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "publishLevel": {
                    "type": "string",
                    "enum": [
                      "preliminary",
                      "final"
                    ],
                    "default": "preliminary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Results published successfully"
          },
          "400": {
            "description": "Invalid input data or election not completed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/admin/register-voter": {
      "post": {
        "summary": "Register a new voter (Admin only)",
        "tags": [
          "Voter Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin",
                  "phoneNumber",
                  "dateOfBirth",
                  "fullName",
                  "pollingUnitCode",
                  "state",
                  "gender",
                  "lga",
                  "ward"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "description": "11-character National Identification Number",
                    "example": "12345678901"
                  },
                  "vin": {
                    "type": "string",
                    "description": "19-character Voter Identification Number",
                    "example": "1234567890123456789"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "Phone number for MFA",
                    "example": "+2348012345678"
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of birth for verification",
                    "example": "1990-01-01"
                  },
                  "fullName": {
                    "type": "string",
                    "description": "Full name of the voter",
                    "example": "John Doe"
                  },
                  "pollingUnitCode": {
                    "type": "string",
                    "description": "Assigned polling unit code",
                    "example": "PU001"
                  },
                  "state": {
                    "type": "string",
                    "description": "State of residence",
                    "example": "Lagos"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ],
                    "description": "Gender of the voter",
                    "example": "male"
                  },
                  "lga": {
                    "type": "string",
                    "description": "Local Government Area",
                    "example": "Ikeja"
                  },
                  "ward": {
                    "type": "string",
                    "description": "Ward within the LGA",
                    "example": "Ward 1"
                  },
                  "autoVerify": {
                    "type": "boolean",
                    "description": "Whether to automatically verify the voter after registration",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Voter registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Voter registered successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "voter": {
                          "type": "object",
                          "description": "Registered voter details"
                        },
                        "verification": {
                          "type": "object",
                          "description": "Verification status (if auto-verified)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "409": {
            "description": "Voter already exists"
          }
        }
      }
    },
    "/api/v1/admin/pending-verifications": {
      "get": {
        "summary": "Get pending voter verification requests (Voter Registration Officer only)",
        "tags": [
          "Verification"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending verification requests returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Voter Registration Officer"
          }
        }
      }
    },
    "/api/v1/admin/approve-verification/{id}": {
      "post": {
        "summary": "Approve a voter verification request (Voter Registration Officer only)",
        "tags": [
          "Verification"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification request approved"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Voter Registration Officer"
          },
          "404": {
            "description": "Verification request not found"
          }
        }
      }
    },
    "/api/v1/admin/reject-verification/{id}": {
      "post": {
        "summary": "Reject a voter verification request (Voter Registration Officer only)",
        "tags": [
          "Verification"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reason"
                ],
                "properties": {
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification request rejected"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Voter Registration Officer"
          },
          "404": {
            "description": "Verification request not found"
          }
        }
      }
    },
    "/api/v1/admin/login": {
      "post": {
        "summary": "Admin user login",
        "tags": [
          "Admin Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "description": "National Identification Number (11 digits)",
                    "pattern": "^\\d{11}$",
                    "example": "12345678901"
                  },
                  "vin": {
                    "type": "string",
                    "description": "Voter Identification Number (19 characters)",
                    "pattern": "^[A-Z0-9]{19}$",
                    "example": "VIN1234567890ABCDEF"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "JWT token for authentication"
                        },
                        "user": {
                          "type": "object",
                          "description": "Admin user information"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account not active"
          }
        }
      }
    },
    "/api/v1/admin/logout": {
      "post": {
        "summary": "Admin user logout",
        "tags": [
          "Admin Authentication"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/admin/verify-results": {
      "post": {
        "summary": "Verify election results",
        "tags": [
          "Result Verification Officer"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "electionId"
                ],
                "properties": {
                  "electionId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Election ID to verify results for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Results verified successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/admin/publish-results": {
      "post": {
        "summary": "Publish verified election results",
        "tags": [
          "Result Verification Officer"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "electionId"
                ],
                "properties": {
                  "electionId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Election ID to publish results for"
                  },
                  "publishLevel": {
                    "type": "string",
                    "enum": [
                      "preliminary",
                      "final"
                    ],
                    "default": "preliminary",
                    "description": "Level of results to publish"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Results published successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/admin/reject-results": {
      "post": {
        "summary": "Reject election results",
        "tags": [
          "Result Verification Officer"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "electionId",
                  "reason"
                ],
                "properties": {
                  "electionId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Election ID to reject results for"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejecting the results"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Results rejected successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/admin/regions/{state}/polling-units": {
      "get": {
        "summary": "Get polling units in a region (Regional Officer only)",
        "tags": [
          "Regional Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lga",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ward",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling units in region returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Regional Officer"
          }
        }
      }
    },
    "/api/v1/admin/polling-units": {
      "post": {
        "summary": "Create a new polling unit (Regional Officer only)",
        "tags": [
          "Regional Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pollingUnitName",
                  "pollingUnitCode",
                  "address",
                  "state",
                  "lga",
                  "ward"
                ],
                "properties": {
                  "pollingUnitName": {
                    "type": "string"
                  },
                  "pollingUnitCode": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "lga": {
                    "type": "string"
                  },
                  "ward": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Polling unit created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Regional Officer"
          }
        }
      }
    },
    "/api/v1/admin/polling-units/{pollingUnitId}": {
      "put": {
        "summary": "Update a polling unit (Regional Officer only)",
        "tags": [
          "Regional Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "pollingUnitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pollingUnitName": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Polling unit updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Regional Officer"
          },
          "404": {
            "description": "Polling unit not found"
          }
        }
      }
    },
    "/api/v1/admin/regions/{state}/statistics": {
      "get": {
        "summary": "Get regional statistics (Regional Officer only)",
        "tags": [
          "Regional Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Regional statistics returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a Regional Officer"
          }
        }
      }
    },
    "/api/v1/admin/dashboard": {
      "get": {
        "summary": "Get comprehensive admin dashboard data",
        "description": "Retrieve all administrative dashboard data in a single API call including\nsystem statistics, admin users, polling units, verification requests,\naudit logs, and suspicious activities. This endpoint consolidates multiple\ndata sources to optimize dashboard loading performance.\n",
        "tags": [
          "Electoral Commissioner",
          "Admin Dashboard"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeAuditLogs",
            "in": "query",
            "description": "Include audit logs in the response (default: true)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "auditLogsLimit",
            "in": "query",
            "description": "Limit number of audit log entries returned",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "suspiciousActivitiesLimit",
            "in": "query",
            "description": "Limit number of suspicious activities returned",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "systemStatistics": {
                          "type": "object",
                          "properties": {
                            "totalVoters": {
                              "type": "integer",
                              "example": 2847392
                            },
                            "activeElections": {
                              "type": "integer",
                              "example": 3
                            },
                            "totalVotes": {
                              "type": "integer",
                              "example": 1923847
                            },
                            "completedElections": {
                              "type": "integer",
                              "example": 12
                            },
                            "pendingVerifications": {
                              "type": "integer",
                              "example": 156
                            },
                            "totalPollingUnits": {
                              "type": "integer",
                              "example": 8842
                            },
                            "systemUptime": {
                              "type": "number",
                              "format": "float",
                              "example": 99.97
                            },
                            "averageTurnout": {
                              "type": "number",
                              "format": "float",
                              "example": 67.4
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-12-19T10:30:00Z"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Dashboard data retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (not an admin user)"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Login a voter (POC - simplified)",
        "description": "Authenticate a voter using NIN and VIN only (no OTP required for POC)",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "description": "National Identification Number (11 digits)",
                    "pattern": "^\\d{11}$",
                    "example": "12345678901"
                  },
                  "vin": {
                    "type": "string",
                    "description": "Voter Identification Number (19 characters)",
                    "pattern": "^[A-Z0-9]{19}$",
                    "example": "VIN1234567890ABCDEF"
                  }
                }
              },
              "examples": {
                "demo_voter": {
                  "summary": "Demo voter credentials",
                  "value": {
                    "nin": "12345678901",
                    "vin": "VIN1234567890ABCDEF"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "JWT token for authentication"
                        },
                        "voter": {
                          "$ref": "#/components/schemas/Voter"
                        },
                        "poc": {
                          "type": "boolean",
                          "example": true
                        },
                        "note": {
                          "type": "string",
                          "example": "POC: Login successful without OTP verification"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account not active"
          }
        }
      }
    },
    "/api/v1/auth/ussd/authenticate": {
      "post": {
        "summary": "Authenticate a voter via USSD",
        "tags": [
          "USSD Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin",
                  "phoneNumber"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "example": "12345678901"
                  },
                  "vin": {
                    "type": "string",
                    "example": "1234567890123456789"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+2348012345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "USSD authentication successful"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/v1/auth/ussd/verify-session": {
      "post": {
        "summary": "Verify USSD session and get token",
        "tags": [
          "USSD Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionCode"
                ],
                "properties": {
                  "sessionCode": {
                    "type": "string",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "USSD session verified"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid or expired session"
          }
        }
      }
    },
    "/api/v1/auth/verify-mfa": {
      "post": {
        "summary": "Verify MFA token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "token"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "token": {
                    "type": "string",
                    "description": "6-digit MFA token",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA verification successful"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid MFA token"
          }
        }
      }
    },
    "/api/v1/auth/setup-mfa": {
      "post": {
        "summary": "Set up MFA for a user",
        "tags": [
          "MFA"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "MFA setup information returned"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/auth/enable-mfa": {
      "post": {
        "summary": "Enable MFA after verification",
        "tags": [
          "MFA"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "6-digit MFA token",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA enabled successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized or invalid token"
          }
        }
      }
    },
    "/api/v1/auth/disable-mfa": {
      "post": {
        "summary": "Disable MFA for a user",
        "tags": [
          "MFA"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "6-digit MFA token",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA disabled successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized or invalid token"
          }
        }
      }
    },
    "/api/v1/auth/generate-backup-codes": {
      "post": {
        "summary": "Generate backup codes for MFA",
        "tags": [
          "MFA"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Backup codes generated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/auth/verify-backup-code": {
      "post": {
        "summary": "Verify a backup code for MFA",
        "tags": [
          "MFA"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "backupCode"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "backupCode": {
                    "type": "string",
                    "example": "ABC123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Backup code verified successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid backup code"
          }
        }
      }
    },
    "/api/v1/auth/refresh-token": {
      "post": {
        "summary": "Refresh authentication token",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout user",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/auth/admin-login": {
      "post": {
        "summary": "Login as an admin",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "password"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "description": "National Identification Number (11 digits)",
                    "pattern": "^\\d{11}$",
                    "example": "12345678901"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Admin password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin login successful"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account inactive"
          }
        }
      }
    },
    "/api/v1/auth/voter/request-login": {
      "post": {
        "summary": "Request voter login with NIN and VIN",
        "description": "First step of voter authentication. Validates NIN and VIN, then sends OTP to registered email.\n\n**Rate Limits:**\n- 5 requests per 5 minutes per IP\n- 3 requests per 5 minutes per user\n",
        "tags": [
          "Voter Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "description": "National Identification Number (11 digits)",
                    "pattern": "^\\d{11}$",
                    "example": "12345678901"
                  },
                  "vin": {
                    "type": "string",
                    "description": "Voter Identification Number (19 characters)",
                    "pattern": "^[A-Z0-9]{19}$",
                    "example": "VIN1234567890ABCDEF"
                  }
                },
                "$ref": "#/components/schemas/VoterLoginRequest"
              },
              "examples": {
                "demo_request": {
                  "summary": "Demo login request",
                  "value": {
                    "nin": "12345678901",
                    "vin": "VIN1234567890ABCDEF"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "POC: Use constant OTP 723111 for verification"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "User ID for the next step"
                        },
                        "email": {
                          "type": "string",
                          "description": "Email address (POC mode)"
                        },
                        "expiresAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the OTP expires"
                        },
                        "constantOtp": {
                          "type": "string",
                          "example": "723111",
                          "description": "Constant OTP for POC"
                        },
                        "poc": {
                          "type": "boolean",
                          "example": true
                        },
                        "instruction": {
                          "type": "string",
                          "example": "Use OTP code 723111 in the next step"
                        }
                      }
                    }
                  },
                  "$ref": "#/components/schemas/OtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or validation error"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account inactive"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/auth/voter/verify-otp": {
      "post": {
        "summary": "Verify OTP and complete voter login",
        "description": "Second step of voter authentication. Verifies OTP code and returns JWT token.\n\n**Rate Limits:**\n- 10 requests per 5 minutes per IP\n- Maximum 3 OTP attempts per code\n",
        "tags": [
          "Voter Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "otpCode"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "User ID from step 1",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "otpCode": {
                    "type": "string",
                    "description": "OTP code (use 723111 for POC)",
                    "example": "723111"
                  }
                },
                "$ref": "#/components/schemas/OtpVerificationRequest"
              },
              "examples": {
                "poc_verification": {
                  "summary": "POC OTP verification",
                  "value": {
                    "userId": "123e4567-e89b-12d3-a456-426614174000",
                    "otpCode": "723111"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "JWT token for authentication"
                        },
                        "user": {
                          "$ref": "#/components/schemas/Voter"
                        },
                        "poc": {
                          "type": "boolean",
                          "example": true
                        },
                        "loginMethod": {
                          "type": "string",
                          "example": "constant_otp_poc"
                        },
                        "constantOtp": {
                          "type": "string",
                          "example": "723111"
                        }
                      }
                    }
                  },
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid OTP or verification failed"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/elections/{id}": {
      "get": {
        "summary": "Get election details",
        "tags": [
          "Elections"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election details returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/elections/{electionId}/dashboard": {
      "get": {
        "summary": "Get comprehensive election dashboard data",
        "tags": [
          "Elections"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election dashboard data returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "ELECTION_DASHBOARD_RETRIEVED"
                    },
                    "message": {
                      "type": "string",
                      "example": "Election dashboard data retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "overview": {
                          "type": "object",
                          "description": "Overview statistics and election info"
                        },
                        "candidates": {
                          "type": "object",
                          "description": "Candidates data and comparison"
                        },
                        "statistics": {
                          "type": "object",
                          "description": "Detailed statistics by region, age, gender"
                        },
                        "liveUpdates": {
                          "type": "array",
                          "description": "Live election updates and announcements"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/elections/{electionId}/candidates": {
      "get": {
        "summary": "Get all candidates for an election",
        "tags": [
          "Candidates"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Election not found"
          }
        }
      },
      "post": {
        "summary": "Create a new candidate for an election (admin only)",
        "tags": [
          "Candidates"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fullName",
                  "partyAffiliation",
                  "position"
                ],
                "properties": {
                  "fullName": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "partyAffiliation": {
                    "type": "string",
                    "example": "Democratic Party"
                  },
                  "position": {
                    "type": "string",
                    "example": "President"
                  },
                  "biography": {
                    "type": "string",
                    "example": "John Doe is a seasoned politician..."
                  },
                  "photoUrl": {
                    "type": "string",
                    "example": "https://example.com/photo.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Candidate created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          }
        }
      }
    },
    "/api/v1/elections/{id}/vote": {
      "post": {
        "summary": "Cast a vote in an election",
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "candidateId"
                ],
                "properties": {
                  "candidateId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vote cast successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Already voted or ineligible"
          },
          "404": {
            "description": "Election or candidate not found"
          }
        }
      }
    },
    "/api/v1/elections/{id}/voting-status": {
      "get": {
        "summary": "Check if voter has already voted in an election",
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voting status returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/elections/{electionId}/offline-package": {
      "get": {
        "summary": "Generate offline voting package",
        "tags": [
          "Offline Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offline voting package generated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Voter not eligible"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/elections/{electionId}/submit-offline": {
      "post": {
        "summary": "Submit offline votes",
        "tags": [
          "Offline Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "encryptedVotes",
                  "signature",
                  "keyId"
                ],
                "properties": {
                  "encryptedVotes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "candidateId",
                        "encryptedVote"
                      ],
                      "properties": {
                        "candidateId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "encryptedVote": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "signature": {
                    "type": "string"
                  },
                  "keyId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offline votes submitted successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/elections/{electionId}/offline-votes/{receiptCode}": {
      "get": {
        "summary": "Verify offline vote status",
        "tags": [
          "Offline Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "receiptCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote verified successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Receipt code not found"
          }
        }
      }
    },
    "/api/v1/mobile/auth/login": {
      "post": {
        "summary": "Login via mobile app",
        "tags": [
          "Mobile Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin",
                  "password"
                ],
                "properties": {
                  "nin": {
                    "type": "string"
                  },
                  "vin": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "deviceInfo": {
                    "type": "object",
                    "properties": {
                      "deviceId": {
                        "type": "string"
                      },
                      "deviceModel": {
                        "type": "string"
                      },
                      "osVersion": {
                        "type": "string"
                      },
                      "appVersion": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authenticated requests"
                    },
                    "verificationRequired": {
                      "type": "boolean",
                      "description": "Whether device verification is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Account locked or requires verification"
          }
        }
      }
    },
    "/api/v1/mobile/auth/request-device-verification": {
      "post": {
        "summary": "Request device verification code",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "deviceId"
                ],
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "description": "Unique identifier for the device"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent successfully"
          },
          "400": {
            "description": "Invalid device ID"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/mobile/auth/verify-device": {
      "post": {
        "summary": "Verify a mobile device",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "deviceId",
                  "verificationCode"
                ],
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "description": "Unique identifier for the device"
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "6-digit verification code sent to the user's phone"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authenticated requests"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "Whether the device was verified"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid verification code"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/mobile/vote/offline-package": {
      "get": {
        "summary": "Download offline voting package",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offline voting package returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/mobile/vote/submit-offline": {
      "post": {
        "summary": "Submit votes collected offline",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "encryptedVotes",
                  "signature"
                ],
                "properties": {
                  "encryptedVotes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "candidateId",
                        "encryptedVote"
                      ],
                      "properties": {
                        "candidateId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "encryptedVote": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "signature": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offline votes submitted successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/v1/mobile/polling-units/nearby": {
      "get": {
        "summary": "Find nearby polling units",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 5
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of nearby polling units returned"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/mobile/my-polling-unit": {
      "get": {
        "summary": "Get user's assigned polling unit",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User's polling unit information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "pollingUnit": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            },
                            "address": {
                              "type": "string"
                            },
                            "state": {
                              "type": "string"
                            },
                            "lga": {
                              "type": "string"
                            },
                            "ward": {
                              "type": "string"
                            },
                            "latitude": {
                              "type": "number"
                            },
                            "longitude": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Polling unit not found"
          }
        }
      }
    },
    "/api/v1/mobile/sync": {
      "post": {
        "summary": "Synchronize data between mobile app and server",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "elections",
                      "candidates",
                      "pollingUnits",
                      "profile"
                    ]
                  },
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data synchronized successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/mobile/elections/{electionId}": {
      "get": {
        "summary": "Get detailed election information for mobile app",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed election information returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "election": {
                          "type": "object"
                        },
                        "candidates": {
                          "type": "array"
                        },
                        "eligibility": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid election ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/mobile/vote/{electionId}": {
      "post": {
        "summary": "Cast vote from mobile app",
        "tags": [
          "Mobile Integration"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "candidateId",
                  "encryptedVote",
                  "signature"
                ],
                "properties": {
                  "candidateId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the candidate being voted for"
                  },
                  "encryptedVote": {
                    "type": "string",
                    "description": "Encrypted vote data"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Digital signature to verify vote integrity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vote cast successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "voteId": {
                          "type": "string"
                        },
                        "receiptCode": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or vote casting error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Voter not eligible or has already voted"
          },
          "404": {
            "description": "Election or candidate not found"
          }
        }
      }
    },
    "/api/v1/auth/voter/resend-otp": {
      "post": {
        "summary": "Resend OTP code",
        "description": "Resend OTP code to voter's registered email. Previous OTP codes are invalidated.\n\n**Rate Limits:**\n- 3 requests per 5 minutes per IP\n- 3 requests per 5 minutes per user\n",
        "tags": [
          "Voter Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "User ID from initial login request"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/auth/admin/login": {
      "post": {
        "summary": "Admin login with NIN and password",
        "description": "Admin authentication using NIN and password. No OTP required for admin users.\n\n**Rate Limits:**\n- 5 requests per 15 minutes per IP\n",
        "tags": [
          "Admin Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or validation error"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account inactive"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/public/elections": {
      "get": {
        "summary": "Get list of elections with candidates (Public)",
        "tags": [
          "Public",
          "Elections"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "upcoming",
                "past",
                "all"
              ],
              "default": "active"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of elections with candidates returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "code": {
                      "type": "string",
                      "example": "ELECTIONS_RETRIEVED"
                    },
                    "message": {
                      "type": "string",
                      "example": "Elections retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "elections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "electionName": {
                                "type": "string"
                              },
                              "electionType": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "startDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "endDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "description": {
                                "type": "string"
                              },
                              "candidates": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "format": "uuid"
                                    },
                                    "fullName": {
                                      "type": "string"
                                    },
                                    "partyName": {
                                      "type": "string"
                                    },
                                    "partyCode": {
                                      "type": "string"
                                    },
                                    "profileImageUrl": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "candidateCount": {
                                "type": "integer",
                                "description": "Total number of candidates"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "pages": {
                              "type": "integer"
                            }
                          }
                        },
                        "voterStatus": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/polling-units": {
      "get": {
        "summary": "Get all polling units with pagination and filtering (Public)",
        "tags": [
          "Public",
          "Polling Units"
        ],
        "parameters": [
          {
            "name": "regionId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of polling units returned"
          }
        }
      }
    },
    "/api/v1/public/polling-units/{id}": {
      "get": {
        "summary": "Get polling unit by ID (Public)",
        "tags": [
          "Public",
          "Polling Units"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling unit returned"
          },
          "404": {
            "description": "Polling unit not found"
          }
        }
      }
    },
    "/api/v1/public/polling-units/nearby": {
      "get": {
        "summary": "Get nearby polling units based on coordinates (Public)",
        "tags": [
          "Public",
          "Polling Units"
        ],
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 5
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of nearby polling units returned"
          },
          "400": {
            "description": "Missing coordinates"
          }
        }
      }
    },
    "/api/v1/results/live/{electionId}": {
      "get": {
        "summary": "Get real-time election results",
        "tags": [
          "Results"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results returned"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/results/statistics/{electionId}": {
      "get": {
        "summary": "Get comprehensive election statistics",
        "tags": [
          "Statistics"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics returned"
          },
          "400": {
            "description": "Error retrieving statistics"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/results/elections/{electionId}": {
      "get": {
        "summary": "Get detailed election results",
        "tags": [
          "Results"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includePollingUnitBreakdown",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results returned"
          },
          "400": {
            "description": "Error retrieving results"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/results/live": {
      "get": {
        "summary": "Get real-time voting statistics across all active elections",
        "tags": [
          "Statistics"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Real-time statistics returned"
          },
          "400": {
            "description": "Error retrieving statistics"
          }
        }
      }
    },
    "/api/v1/results/region/{electionId}": {
      "get": {
        "summary": "Get election results by region",
        "tags": [
          "Results"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "regionType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "state",
                "lga",
                "ward"
              ],
              "default": "state"
            }
          },
          {
            "name": "regionCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results by region returned"
          },
          "400": {
            "description": "Invalid region type or missing region code"
          },
          "404": {
            "description": "Election not found"
          }
        }
      }
    },
    "/api/v1/ussd/start": {
      "post": {
        "summary": "Initiate USSD voting session",
        "tags": [
          "USSD"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nin",
                  "vin",
                  "phoneNumber"
                ],
                "properties": {
                  "nin": {
                    "type": "string",
                    "example": "12345678901"
                  },
                  "vin": {
                    "type": "string",
                    "example": "1234567890123456789"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+2348012345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "USSD session started, code sent via SMS"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Too many attempts"
          }
        }
      }
    },
    "/api/v1/ussd/vote": {
      "post": {
        "summary": "Cast a vote via USSD",
        "tags": [
          "USSD"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionCode",
                  "electionId",
                  "candidateId"
                ],
                "properties": {
                  "sessionCode": {
                    "type": "string",
                    "example": "123456"
                  },
                  "electionId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "candidateId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote cast successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid session"
          },
          "403": {
            "description": "Already voted"
          }
        }
      }
    },
    "/api/v1/ussd/session-status": {
      "get": {
        "summary": "Check USSD session status",
        "tags": [
          "USSD"
        ],
        "parameters": [
          {
            "name": "sessionCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session status returned"
          },
          "404": {
            "description": "Session not found"
          }
        }
      }
    },
    "/api/v1/ussd/verify-vote": {
      "post": {
        "summary": "Verify a vote using receipt code",
        "tags": [
          "USSD"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "receiptCode",
                  "phoneNumber"
                ],
                "properties": {
                  "receiptCode": {
                    "type": "string",
                    "example": "a1b2c3d4e5f6g7h8"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+2348012345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote verification result"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Vote not found"
          }
        }
      }
    },
    "/api/v1/ussd/menu": {
      "post": {
        "summary": "Handle USSD menu navigation",
        "tags": [
          "USSD"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionId",
                  "selection"
                ],
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "example": "123456"
                  },
                  "selection": {
                    "type": "string",
                    "example": "1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu navigation processed"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Session not found"
          }
        }
      }
    },
    "/api/v1/ussd/end": {
      "post": {
        "summary": "End USSD session",
        "tags": [
          "USSD"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionId"
                ],
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session ended successfully"
          },
          "404": {
            "description": "Session not found"
          }
        }
      }
    },
    "/api/v1/voter/profile": {
      "get": {
        "summary": "Get voter profile",
        "tags": [
          "Voter Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Voter profile returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Voter not found"
          }
        }
      },
      "put": {
        "summary": "Update voter profile",
        "tags": [
          "Voter Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phoneNumber": {
                    "type": "string",
                    "example": "+2348012345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/polling-unit": {
      "get": {
        "summary": "Get voter's assigned polling unit",
        "tags": [
          "Voter Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Polling unit returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Polling unit not found"
          }
        }
      }
    },
    "/api/v1/voter/polling-units": {
      "get": {
        "summary": "Get all polling units with pagination and filtering",
        "tags": [
          "Polling Units"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "regionId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of polling units returned"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/polling-units/{id}": {
      "get": {
        "summary": "Get polling unit by ID",
        "tags": [
          "Polling Units"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling unit returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Polling unit not found"
          }
        }
      }
    },
    "/api/v1/voter/polling-units/nearby": {
      "get": {
        "summary": "Get nearby polling units based on coordinates",
        "tags": [
          "Polling Units"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 5
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of nearby polling units returned"
          },
          "400": {
            "description": "Missing coordinates"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/verification-status": {
      "get": {
        "summary": "Get voter verification status",
        "tags": [
          "Verification"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Verification status returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Verification status not found"
          }
        }
      }
    },
    "/api/v1/voter/submit-verification": {
      "post": {
        "summary": "Submit verification request",
        "tags": [
          "Verification"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "documentType",
                  "documentNumber",
                  "documentImageUrl"
                ],
                "properties": {
                  "documentType": {
                    "type": "string",
                    "example": "NIN"
                  },
                  "documentNumber": {
                    "type": "string",
                    "example": "12345678901"
                  },
                  "documentImageUrl": {
                    "type": "string",
                    "example": "https://example.com/document.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification request submitted"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/eligibility/{electionId}": {
      "get": {
        "summary": "Check voter eligibility for an election",
        "tags": [
          "Voter Management"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eligibility status returned"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/vote-history": {
      "get": {
        "summary": "Get voter's vote history",
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Vote history returned"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/verify-vote/{receiptCode}": {
      "get": {
        "summary": "Verify a vote receipt",
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "receiptCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote verified successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Invalid receipt code"
          }
        }
      }
    },
    "/api/v1/voter/report-vote-issue": {
      "post": {
        "summary": "Report an issue with a vote",
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "voteId",
                  "issueType",
                  "description"
                ],
                "properties": {
                  "voteId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "issueType": {
                    "type": "string",
                    "enum": [
                      "technical",
                      "fraud",
                      "coercion",
                      "other"
                    ]
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Issue reported successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/voter/dashboard/{electionId}": {
      "get": {
        "summary": "Get comprehensive dashboard data",
        "description": "Retrieve all dashboard data for a specific election in a single API call",
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "electionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the election"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID to get personalized voting status"
          },
          {
            "name": "includeRealTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to include real-time updates"
          },
          {
            "name": "includeRegionalBreakdown",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to include regional breakdown data"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with comprehensive dashboard data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid election ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Election not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}